name: Protect Critical Files

on:
  push:

jobs:
  check-protected-files:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full commit history for accurate comparisons

      - name: Identify Commit Range
        id: commits
        run: |
          # Use the GitHub `before` context to determine the base commit
          BASE_COMMIT=${{ github.event.before }}
          echo "Base commit: $BASE_COMMIT"
          echo "HEAD commit: $(git rev-parse HEAD)"
          echo "Commit range: $BASE_COMMIT..HEAD"

          # Expose the base commit for subsequent steps
          echo "BASE_COMMIT=$BASE_COMMIT" >> $GITHUB_ENV

      - name: Check for Unauthorized Changes
        id: check
        run: |
          # Define the protected files
          PROTECTED_FILES=("package.json" "package-lock.json")

          # Use the base commit from the environment
          COMMIT_RANGE="${BASE_COMMIT}..HEAD"
          echo "Checking commits in range: $COMMIT_RANGE"

          # Fetch the list of modified files
          MODIFIED_FILES=$(git diff --name-only $COMMIT_RANGE)
          echo "Modified files in push: $MODIFIED_FILES"

          # Check if any protected files were modified
          for file in "${PROTECTED_FILES[@]}"; do
              if echo "$MODIFIED_FILES" | grep -q "^$file$"; then
                  echo "Error: Unauthorized modification detected in $file."
                  exit 1
              fi
          done

          echo "All protected files are safe."

      - name: Revert Push if Check Fails
        if: failure()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Reverting all commits in this push..."

          # Configure Git to use the GitHub Actions bot
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          # Reset the branch to the base commit
          git reset --hard ${{ github.event.before }}

          # Force push to revert the branch state using GITHUB_TOKEN
          git push https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }} HEAD --force

          echo "All commits have been reverted."

      - name: Send Email Notification
        if: failure()
        uses: dawidd6/action-send-mail@v4
        with:
          # Specify connection via URL (replaces server_address, server_port, secure,
          # username and password)
          #
          # Format:
          #
          #  * smtp://diamond.peprdiadem@gmail.com:#44sG$Nz6P!g@smtp.gmail.com:465
          #  * smtp+starttls://user:password@server:port
          connection_url: ${{secrets.MAIL_CONNECTION}}
          # Required mail server address if not connection_url:
          server_address: smtp.gmail.com
          # Server port, default 25:
          server_port: 465
          # Optional whether this connection use TLS (default is true if server_port is 465)
          secure: true
          # Optional (recommended) mail server username:
          username: ${{secrets.MAIL_USERNAME}}
          # Optional (recommended) mail server password:
          password: ${{secrets.MAIL_PASSWORD}}
          # Required mail subject:
          subject: \[diamond-diadem.github.io\] - Push rejected - Modified protected files
          # Required recipients' addresses:
          to: ${{ github.event.pusher.email }}
          # Required sender full name (address can be skipped):
          from: DIAMOND website administration # <user@example.com>
          # Optional plain body:
          body: Hello,\n\nYour push to the repository '${{ github.repository }}' was rejected because it included unauthorized changes to protected files (e.g., package.json or package-lock.json).\n\nPlease review the repository guidelines and adjust your changes before pushing again.\n\nThank you.
          # Optional HTML body read from file:
          html_body:
          # Optional carbon copy recipients:
          cc:
          # Optional blind carbon copy recipients:
          bcc:
          # Optional recipient of the email response:
          reply_to:
          # Optional Message ID this message is replying to:
          in_reply_to:
          # Optional unsigned/invalid certificates allowance:
          ignore_cert: true
          # Optional converting Markdown to HTML (set content_type to text/html too):
          convert_markdown: true
          # Optional attachments:
          attachments:
          # Optional priority: 'high', 'normal' (default) or 'low'
          priority: high
          # Optional nodemailerlog: true/false
          nodemailerlog: false
          # Optional nodemailerdebug: true/false if true lognodem will also be set true
          nodemailerdebug: false
